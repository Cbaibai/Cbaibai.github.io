<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F10%2F27%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[Perl子程序(函数)]]></title>
    <url>%2F2018%2F10%2F26%2FPerl%20_process%2F</url>
    <content type="text"><![CDATA[Usage 1234# 子程序定义:sub subroutine &#123; &lt; statements &gt;&#125; 基本示例 1234567#!/usr/bin/perlsub Hello &#123; print "Hello, World!\n";&#125;Hello(); 向子程序传参 1234567891011121314sub Average &#123; $n = scalar(@_); # 子程序中的@_表示传入此子程序的参数数组(可以改变),_是数组名 $sum = 0; foreach $item (@_) &#123; # item(arr)取出数组中每项元素的值 $sum += $item; &#125; $average = $sum / $n; print '传入的参数: ', '@_\n'; print '第一个参数值为: $_[0]\n'; # _指向数组中的第一个元素,故$_表示参数数组中的第一个元素 print '传入参数的平均值: $average \ n';&#125; 向子程序传递列表 12345678sub printList &#123; my @list = @_; print "列表为: @list\n";&#125;@a = 10;@b = (1, 2, 3, 4);printList($a, @b); # 列表为: 10 1 2 3 4 向子程序传递哈希 123456789101112sub printHash &#123;# my定义函数内局部变量,若不加my类型修饰,则表示声明全局变量 my (%hash) = @_; foreach my $key ( keys %hash ) &#123; my $value = $hash&#123;$key&#125;; print "$key: $value\n"; &#125;&#125;%hash = ('name' =&gt; 'youj', 'age' =&gt; 3)printHash(%hash); 子程序返回值 12345678910sub add_a_b &#123; $_[0] + $_[1]; # 若没有return语句,则子程序最后语句即为返回值。&#125;sub add_a_b &#123; return $_[0] + $_[1];&#125;print add_a_b(1, 2) # 3 子程序的私有(局部)变量 12345678910# 用my定义函数私有变量$string = "Hello, World!";sub printHello &#123; my $string = "Hello"; print "函数内字符串: $string\n"&#125;printHello();print "函数外字符串: $string\n" 123# 以上代码输出:函数内字符串: Hello函数外字符串: Hello World 变量的临时赋值 1234567891011121314151617181920$string = "Hello World!";sub printsome &#123;# 使用local可对全局变量$string赋临时值,这个临时值的生效范围在本函数,及本函数所调用的函数 local $string = "Hello" printMe(); print "printsome 函数内字符串值: $string\n";&#125;sub printMe &#123; print "printMe 函数内字符串值: $string\n";&#125;sub printHello &#123; print "printHello 函数内字符串值: $string\n";&#125;printsome();printHello();print "函数外部字符串值: $string\n"; 12345# 以上代码输出:printMe 函数内字符串值: Helloprintsome 函数内字符串值: HelloprintHello 函数内字符串值: Hello, World!函数外部字符串值: Hello, World! 静态变量 1234567891011121314# static是词法变量,只在定义该变量的词法作用域中有效:use feature 'state';sub printCount &#123;# 静态变量可以看作是函数体内的全局变量,不因函数内存回收而销毁 state $count = 0; # 初始化变量 print "counter 值为: $count\n"; $count++;&#125;for (1..5) &#123; printCount();&#125; 123456# 上述代码输出:counter值为: 0counter值为: 1counter值为: 2counter值为: 3counter值为: 4 子程序定义上下文 子程序在调用过程中,会根据上下文来返回不同类型的值123456789# 标量上下文my $dateStr = localtime(time);print $dateStr;print "\n";# 列表上下文($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);printf("%d-%d-%d %d:%d:%d", $year+1990, $mon+1, $mday, $hour, $min, $sec);print "\n"; 123# 以上代码输出:Sun Jun 12 15:58:09 20162016-6-12 15:58:9 Download Now]]></content>
      <categories>
        <category>perl</category>
      </categories>
      <tags>
        <tag>perl</tag>
        <tag>函数</tag>
      </tags>
  </entry>
</search>
